// src/components/WorkloadInputs.tsx
import React, { useState } from "react";
import { WorkloadParams } from "./Simulator";

interface WorkloadInputsProps {
  workload: WorkloadParams;
  setWorkload: React.Dispatch<React.SetStateAction<WorkloadParams>>;
}

const WorkloadInputs: React.FC<WorkloadInputsProps> = ({
  workload,
  setWorkload,
}) => {
  const [expandedHelp, setExpandedHelp] = useState<string | null>(null);

  const handleChange = (key: keyof WorkloadParams, value: number) => {
    setWorkload((prev) => ({ ...prev, [key]: value }));
  };

  const toggleHelp = (key: string) => {
    setExpandedHelp(expandedHelp === key ? null : key);
  };

  // Ensure values are defined with defaults if needed
  const safeWorkload = {
    requestsPerSecond: workload?.requestsPerSecond ?? 100,
    metricsPerRequest: workload?.metricsPerRequest ?? 100,
    uniqueMetricsRatio: workload?.uniqueMetricsRatio ?? 0.2,
    calculationComplexity: workload?.calculationComplexity ?? 3,
    flushIntervalSeconds: workload?.flushIntervalSeconds ?? 10,
    retentionPeriodDays: workload?.retentionPeriodDays ?? 30,
  };

  // Calculate derived metrics
  const totalMetricsPerSecond =
    safeWorkload.requestsPerSecond * safeWorkload.metricsPerRequest;
  const uniqueMetricsPerSecond = Math.round(
    totalMetricsPerSecond * safeWorkload.uniqueMetricsRatio,
  );
  const metricsPerFlush =
    uniqueMetricsPerSecond * safeWorkload.flushIntervalSeconds;

  // Custom slider styles
  const sliderTrackClass =
    "w-full h-1 bg-gray-200 rounded-full appearance-none cursor-pointer";
  const sliderLabelClass =
    "block text-base text-gray-700 mb-2 font-light flex justify-between";
  const sliderValueClass = "font-medium text-blue-600";
  const sliderMarkersClass = "flex justify-between text-xs text-gray-400 mt-1";
  const sliderDescriptionClass = "text-xs text-gray-500 mt-1.5 leading-relaxed";

  // Help content
  const helpContent = {
    requests: (
      <div className="p-3 bg-blue-50 rounded-lg text-sm text-gray-600 mt-2 border border-blue-100">
        <p>
          <span className="font-medium">What is this?</span> The number of API
          calls or user interactions your application handles each second.
        </p>
        <p className="mt-2">
          <span className="font-medium">Why it matters:</span> More requests
          generally produce more metrics that need to be collected and stored.
        </p>
        <div className="mt-2 grid grid-cols-3 gap-2 text-xs">
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Low</div>
            <div>10-100/sec</div>
            <div className="text-gray-500">Small internal apps</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Medium</div>
            <div>100-1,000/sec</div>
            <div className="text-gray-500">Business applications</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">High</div>
            <div>1,000+/sec</div>
            <div className="text-gray-500">High-traffic services</div>
          </div>
        </div>
      </div>
    ),
    metricsPerRequest: (
      <div className="p-3 bg-blue-50 rounded-lg text-sm text-gray-600 mt-2 border border-blue-100">
        <p>
          <span className="font-medium">What is this?</span> The average number
          of measurements generated by each request in your application.
        </p>
        <p className="mt-2">
          <span className="font-medium">Why it matters:</span> More complex
          applications typically track more data points per request, increasing
          the monitoring load.
        </p>
        <div className="mt-2 grid grid-cols-3 gap-2 text-xs">
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Simple</div>
            <div>10-50</div>
            <div className="text-gray-500">Basic timing metrics</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Moderate</div>
            <div>50-200</div>
            <div className="text-gray-500">Standard monitoring</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Detailed</div>
            <div>200+</div>
            <div className="text-gray-500">Extensive tracking</div>
          </div>
        </div>
      </div>
    ),
    uniqueMetricsRatio: (
      <div className="p-3 bg-blue-50 rounded-lg text-sm text-gray-600 mt-2 border border-blue-100">
        <p>
          <span className="font-medium">What is this?</span> The percentage of
          metrics that are unique, rather than updates to existing metrics.
        </p>
        <p className="mt-2">
          <span className="font-medium">Why it matters:</span> Higher values
          create more distinct metrics to store, increasing storage needs
          significantly.
        </p>
        <div className="mt-2 grid grid-cols-3 gap-2 text-xs">
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Low cardinality</div>
            <div>5-15%</div>
            <div className="text-gray-500">Fixed metric names</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Medium</div>
            <div>15-40%</div>
            <div className="text-gray-500">Some dynamic names</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">High cardinality</div>
            <div>40%+</div>
            <div className="text-gray-500">Many unique IDs</div>
          </div>
        </div>
      </div>
    ),
    retention: (
      <div className="p-3 bg-blue-50 rounded-lg text-sm text-gray-600 mt-2 border border-blue-100">
        <p>
          <span className="font-medium">What is this?</span> How long metrics
          data is kept before being deleted.
        </p>
        <p className="mt-2">
          <span className="font-medium">Why it matters:</span> Longer retention
          periods require proportionally more storage space.
        </p>
        <div className="mt-2 grid grid-cols-3 gap-2 text-xs">
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Short-term</div>
            <div>7-30 days</div>
            <div className="text-gray-500">Recent monitoring</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Medium</div>
            <div>30-90 days</div>
            <div className="text-gray-500">Quarterly trends</div>
          </div>
          <div className="bg-white p-2 rounded border border-gray-100">
            <div className="font-medium">Long-term</div>
            <div>90+ days</div>
            <div className="text-gray-500">Historical analysis</div>
          </div>
        </div>
      </div>
    ),
  };

  return (
    <div className="space-y-6">
      {/* Requests Per Second */}
      <div className="group transition-all duration-200">
        <div className="flex justify-between items-start mb-2">
          <label className="block text-base text-gray-700 font-light">
            <span>Traffic Volume</span>
            <div className={sliderValueClass}>
              {safeWorkload.requestsPerSecond.toLocaleString()} requests/sec
            </div>
          </label>
          <button
            onClick={() => toggleHelp("requests")}
            className="text-xs text-blue-600 hover:text-blue-800 ml-2 flex items-center"
          >
            <svg
              className="w-3.5 h-3.5 mr-0.5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            {expandedHelp === "requests" ? "Hide tips" : "Learn more"}
          </button>
        </div>
        <div className="relative">
          <input
            type="range"
            min="10"
            max="2000"
            step="10"
            value={safeWorkload.requestsPerSecond}
            onChange={(e) =>
              handleChange("requestsPerSecond", Number(e.target.value))
            }
            className={`${sliderTrackClass} [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-blue-600 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-150 group-hover:[&::-webkit-slider-thumb]:scale-110`}
            aria-label={`Traffic volume: ${safeWorkload.requestsPerSecond} requests per second`}
          />
        </div>
        <div className={sliderMarkersClass}>
          <span>Small</span>
          <span>Medium</span>
          <span>Large</span>
        </div>
        {expandedHelp === "requests" && helpContent.requests}
      </div>

      {/* Metrics Per Request */}
      <div className="group transition-all duration-200">
        <div className="flex justify-between items-start mb-2">
          <label className="block text-base text-gray-700 font-light">
            <span>Monitoring Detail</span>
            <div className={sliderValueClass}>
              {safeWorkload.metricsPerRequest.toLocaleString()} metrics/request
            </div>
          </label>
          <button
            onClick={() => toggleHelp("metricsPerRequest")}
            className="text-xs text-blue-600 hover:text-blue-800 ml-2 flex items-center"
          >
            <svg
              className="w-3.5 h-3.5 mr-0.5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            {expandedHelp === "metricsPerRequest" ? "Hide tips" : "Learn more"}
          </button>
        </div>
        <div className="relative">
          <input
            type="range"
            min="10"
            max="1000"
            step="10"
            value={safeWorkload.metricsPerRequest}
            onChange={(e) =>
              handleChange("metricsPerRequest", Number(e.target.value))
            }
            className={`${sliderTrackClass} [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-blue-600 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-150 group-hover:[&::-webkit-slider-thumb]:scale-110`}
            aria-label={`Monitoring detail: ${safeWorkload.metricsPerRequest} metrics per request`}
          />
        </div>
        <div className={sliderMarkersClass}>
          <span>Basic</span>
          <span>Standard</span>
          <span>Detailed</span>
        </div>
        {expandedHelp === "metricsPerRequest" && helpContent.metricsPerRequest}
      </div>

      {/* Unique Metrics Ratio */}
      <div className="group transition-all duration-200">
        <div className="flex justify-between items-start mb-2">
          <label className="block text-base text-gray-700 font-light">
            <span>Metrics Variety</span>
            <div className={sliderValueClass}>
              {(safeWorkload.uniqueMetricsRatio * 100).toFixed(0)}% unique
            </div>
          </label>
          <button
            onClick={() => toggleHelp("uniqueMetricsRatio")}
            className="text-xs text-blue-600 hover:text-blue-800 ml-2 flex items-center"
          >
            <svg
              className="w-3.5 h-3.5 mr-0.5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            {expandedHelp === "uniqueMetricsRatio" ? "Hide tips" : "Learn more"}
          </button>
        </div>
        <div className="relative">
          <input
            type="range"
            min="1"
            max="100"
            step="1"
            value={safeWorkload.uniqueMetricsRatio * 100}
            onChange={(e) =>
              handleChange("uniqueMetricsRatio", Number(e.target.value) / 100)
            }
            className={`${sliderTrackClass} [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-blue-600 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-150 group-hover:[&::-webkit-slider-thumb]:scale-110`}
            aria-label={`Metrics variety: ${(safeWorkload.uniqueMetricsRatio * 100).toFixed(0)}% unique`}
          />
        </div>
        <div className={sliderMarkersClass}>
          <span>Low variety</span>
          <span>Medium</span>
          <span>High variety</span>
        </div>
        {expandedHelp === "uniqueMetricsRatio" &&
          helpContent.uniqueMetricsRatio}
      </div>

      {/* Calculation Complexity */}
      <div className="group transition-all duration-200">
        <label className={sliderLabelClass}>
          <span>Visualization Complexity</span>
          <span className={sliderValueClass}>
            {
              [
                "Very Simple",
                "Simple",
                "Basic",
                "Moderate",
                "Standard",
                "Advanced",
                "Complex",
                "Very Complex",
                "Sophisticated",
                "Highly Complex",
              ][safeWorkload.calculationComplexity - 1]
            }
          </span>
        </label>
        <div className="relative">
          <input
            type="range"
            min="1"
            max="10"
            step="1"
            value={safeWorkload.calculationComplexity}
            onChange={(e) =>
              handleChange("calculationComplexity", Number(e.target.value))
            }
            className={`${sliderTrackClass} [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-blue-600 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-150 group-hover:[&::-webkit-slider-thumb]:scale-110`}
            aria-label={`Visualization complexity: Level ${safeWorkload.calculationComplexity} of 10`}
          />
        </div>
        <div className={sliderMarkersClass}>
          <span>Simple</span>
          <span>Standard</span>
          <span>Complex</span>
        </div>
        <div className={sliderDescriptionClass}>
          How complex your dashboard visualizations are. Higher values require
          more CPU for calculations.
        </div>
      </div>

      {/* Advanced Settings Section */}
      <div className="border-t border-gray-100 pt-4 mt-6">
        <details className="group">
          <summary className="list-none flex items-center cursor-pointer mb-3">
            <h3 className="text-sm font-medium text-gray-700 flex-1">
              Advanced Settings
            </h3>
            <svg
              className="w-5 h-5 text-gray-500 group-open:rotate-180 transition-transform"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clipRule="evenodd"
              />
            </svg>
          </summary>

          <div className="pt-2 pb-1 space-y-4">
            {/* Flush Interval */}
            <div className="group transition-all duration-200">
              <label className={sliderLabelClass}>
                <span>Update Frequency</span>
                <span className={sliderValueClass}>
                  Every {safeWorkload.flushIntervalSeconds}s
                </span>
              </label>
              <div className="relative">
                <input
                  type="range"
                  min="1"
                  max="60"
                  step="1"
                  value={safeWorkload.flushIntervalSeconds}
                  onChange={(e) =>
                    handleChange("flushIntervalSeconds", Number(e.target.value))
                  }
                  className={`${sliderTrackClass} [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-blue-600 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-150 group-hover:[&::-webkit-slider-thumb]:scale-110`}
                  aria-label={`Update frequency: Every ${safeWorkload.flushIntervalSeconds} seconds`}
                />
              </div>
              <div className={sliderMarkersClass}>
                <span>1s (Real-time)</span>
                <span>30s</span>
                <span>60s</span>
              </div>
              <div className={sliderDescriptionClass}>
                How often metrics are written to storage. Faster updates use
                more memory but provide fresher data.
              </div>
            </div>

            {/* Retention Period */}
            <div className="group transition-all duration-200">
              <div className="flex justify-between items-start mb-2">
                <label className="block text-base text-gray-700 font-light">
                  <span>Data Retention</span>
                  <div className={sliderValueClass}>
                    {safeWorkload.retentionPeriodDays} days
                  </div>
                </label>
                <button
                  onClick={() => toggleHelp("retention")}
                  className="text-xs text-blue-600 hover:text-blue-800 ml-2 flex items-center"
                >
                  <svg
                    className="w-3.5 h-3.5 mr-0.5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  {expandedHelp === "retention" ? "Hide tips" : "Learn more"}
                </button>
              </div>
              <div className="relative">
                <input
                  type="range"
                  min="7"
                  max="365"
                  step="1"
                  value={safeWorkload.retentionPeriodDays}
                  onChange={(e) =>
                    handleChange("retentionPeriodDays", Number(e.target.value))
                  }
                  className={`${sliderTrackClass} [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-blue-600 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-150 group-hover:[&::-webkit-slider-thumb]:scale-110`}
                  aria-label={`Data retention: ${safeWorkload.retentionPeriodDays} days`}
                />
              </div>
              <div className={sliderMarkersClass}>
                <span>1 week</span>
                <span>6 months</span>
                <span>1 year</span>
              </div>
              {expandedHelp === "retention" && helpContent.retention}
            </div>
          </div>
        </details>
      </div>

      {/* Summary Box */}
      <div className="mt-8 p-6 bg-gray-50 rounded-xl border border-gray-100">
        <h3 className="text-sm font-medium text-gray-800 mb-4">
          Metrics Summary
        </h3>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white p-3 rounded-lg border border-gray-100 transition-all hover:shadow-sm">
            <div className="text-xs text-gray-500">Total Volume</div>
            <div className="font-medium text-lg">
              {totalMetricsPerSecond.toLocaleString()}/sec
            </div>
          </div>
          <div className="bg-white p-3 rounded-lg border border-gray-100 transition-all hover:shadow-sm">
            <div className="text-xs text-gray-500">Unique Metrics Rate</div>
            <div className="font-medium text-lg">
              {uniqueMetricsPerSecond.toLocaleString()}/sec
            </div>
          </div>
          <div className="bg-white p-3 rounded-lg border border-gray-100 transition-all hover:shadow-sm">
            <div className="text-xs text-gray-500">Storage Updates</div>
            <div className="font-medium text-lg">
              {metricsPerFlush.toLocaleString()}/batch
            </div>
          </div>
          <div className="bg-white p-3 rounded-lg border border-gray-100 transition-all hover:shadow-sm">
            <div className="text-xs text-gray-500">Daily Metrics</div>
            <div className="font-medium text-lg">
              {(uniqueMetricsPerSecond * 86400).toLocaleString()}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WorkloadInputs;
